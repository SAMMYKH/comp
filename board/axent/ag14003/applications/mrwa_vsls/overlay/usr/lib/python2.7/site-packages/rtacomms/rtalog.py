import datetime, struct

logs_with_data = [0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09]

def retrieve_log_type(p, session):
    log_type = ord(p.data[0])
    max_entries = struct.unpack(">H", p.data[1:3])[0]
    
    if log_type > 4:
        session.reject(p.mi, '\x02')
        return

    if log_type < 4:
        logs = session.server.group.get_rta_log(max_entries, log_type)
        response_data = ''
        response_data += ('%x' % log_type).zfill(2)
        response_data += ('%x' % len(logs)).zfill(2)

        for l in logs:
            response_data += ('%x' % int(l['uniqueID'])).zfill(2)
            date = datetime.datetime.strptime(l['date'],'%Y-%m-%d %H:%M:%S.%f')
            d = ('%x' % date.day).zfill(2)
            m = ('%x' % date.month).zfill(2)
            y = ('%x' % date.year).zfill(4)
            h = ('%x' % date.hour).zfill(2)
            mi = ('%x' % date.minute).zfill(2)
            s = ('%x' % date.second).zfill(2)
            ms = ('%x' % int(date.microsecond /10000)).zfill(2)
            response_data += d + m + y + h + mi + s + ms

            if log_type == 0 or log_type == 1:
                response_data += ('%x' % int(l['controllerID'])).zfill(2)
                response_data += ('%x' % int(l['errorCode'])).zfill(2)
            
            if log_type == 2:
                response_data += ('%x' % int(l['oldFrame'])).zfill(2)
                response_data += ('%x' % int(l['newFrame'])).zfill(2)
                
            if log_type == 3:
                if int(l['logID']) in logs_with_data:
                    response_data += '02'
                    response_data += ('%x' % int(l['logID'])).zfill(2)
                    response_data += ('%x' % int(l['data'])).zfill(2)
                else:
                    response_data += '01'
                    response_data += ('%x' % int(l['logID'])).zfill(2)        
            
            if log_type == 0:
                response_data += ('%x' % int(l['occurred'])).zfill(2)
    
    else:
        logs = session.server.group.get_rta_power_log(max_entries)
        response_data = ''
        response_data += ('%x' % log_type).zfill(2)
        date = datetime.datetime.now()
        d = ('%x' % date.day).zfill(2)
        m = ('%x' % date.month).zfill(2)
        y = ('%x' % date.year).zfill(4)
        h = ('%x' % date.hour).zfill(2)
        mi = ('%x' % date.minute).zfill(2)
        s = ('%x' % date.second).zfill(2)
        ms = ('%x' % int(date.microsecond /10000)).zfill(2)
        response_data += d + m + y + h + mi + s + ms
        response_data += ('%x' % max_entries).zfill(2)
        response_data += ('%x' % len(logs.keys())).zfill(2)

        for i, data in logs.iteritems():
            response_data += ('%x' % int(i)).zfill(2)
            response_data += ('%x' % max_entries).zfill(2)
            for l in data:
                response_data += ('%x' % int(l['solarCurrent'])).zfill(2)
                response_data += ('%x' % int(l['batteryCurrent'])).zfill(2)
                response_data += ('%x' % int(l['batteryVoltage'])).zfill(2)

    session.send_packet(0x23, response_data.decode('hex'))

def reset_log_type(p, session):
    log_type = ord(p.data[0])
    if log_type > 4:
        session.reject(p.mi, '\x02')
        return
    
    session.server.group.reset_rta_log(log_type)

    session.app_ack(p.mi)

